#!/bin/bash
###############################################################################
# Description:
# This script generates source code from the JSON spec files (for languages
# supported that can not use the JSON spec files directly, i.e. Java and
# Objective C), generates required protobuf source from the .proto definitions
# and compiles them (as necessary).
###############################################################################

# script dir
if [ `uname` == "Linux" ]; then
    SCRIPT_DIR=$(dirname $(readlink -f $0))
else
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi
# JSON schema files. Figure out the path based on the location of this script.
# schema directory is the parent directory of the directory that holds this script
SCHEMA_DIR=$(dirname ${SCRIPT_DIR})
# Supported targets
TARGETS="java objc golang"

###############################################################################
# Print this script's usage
###############################################################################
function printUsage() {
  TARGET_LIST="$(echo ${TARGETS} | sed -e 's/ /\, /')"
  cat << EOF
Usage:
  index.sh <target> <gen src dir>

Where:
  <target> is one of: ${TARGET_LIST}
  <gen src dir> is the location of the generated source files
EOF
}

###############################################################################
# Return true(0) if the supplied target is in the supported $TARGETS list,
# false(1) otherwise.
###############################################################################
function isSupported() {
  for supported in ${TARGETS}; do
    if test "$supported" == "$1"; then
      return 0
    fi
  done
  return 1
}

###############################################################################
# Return false(1) if the supplied argument list does not have exactly one
# argument OR it's not a supported TARGET.
###############################################################################
function validateArgs() {
  # make sure there is only 1 command line argument, and it's in the $TARGETS list
  if test "$#" -ne 2 || ! isSupported "$1"; then
    printUsage
    return 1
  fi
}

###############################################################################
# Return the common header for generating a Java source file for the specified
# schema.
###############################################################################
function getJavaHeader() {
  cat << EOF
package com.boundlessgeo.schema;

public enum ${1} {

EOF
}

###############################################################################
# Return the generated Java source body for the specified schema file.
###############################################################################
function getJavaBody() {
  # blank line before generating enums
  echo ""
  # replace the JSON with JAVA enum source
  # replace leading spaces up to the first double quote with 2 spaces
  # replace <double quote><optional space><colon><optional space><double quote> with <open paren><double quote>
  # replace <double quote><comma> with <double quote><close paren><comma>
  # replace <double quote><EOL> with <double quote><close paren><semi-colon>
  # remove lines with curly braces
  sed -e 's/^[[:space:]]*\"/  /' \
      -e 's/\"[[:space:]]*\:[[:space:]]*\"/(\"/' \
      -e 's/\",/\"),/' \
      -e 's/\"$/\");/' \
      -e $'/[{}]/d' ${SCHEMAFILE}
}

###############################################################################
# Return the common footer for generating a Java source file for the specified
# schema.
###############################################################################
function getJavaFooter() {
  CLASS=${1}
  JAVA_VARIABLE=${2,,}
  MSGVAR=${JAVA_VARIABLE^}
  cat << EOF

  private final String ${JAVA_VARIABLE};

  ${CLASS}(String ${JAVA_VARIABLE}) {
    this.${JAVA_VARIABLE} = ${JAVA_VARIABLE};
  }

  public String value() {
    return ${JAVA_VARIABLE};
  }

  public static ${CLASS} from${MSGVAR}(String ${JAVA_VARIABLE}) {
    for (${CLASS} v : values()) {
      if (v.${JAVA_VARIABLE}.equalsIgnoreCase(${JAVA_VARIABLE})) {
        return v;
      }
    }
    throw new IllegalArgumentException(
        "${MSGVAR}: " + ${JAVA_VARIABLE} + " is not an ${VARIABLE} associated with an ${MSGVAR}."
    );
  }
}

EOF
}
###############################################################################
# Return the common header for generating a ObjC source file for the specified
# schema.
###############################################################################
function getObjcHeader() {
  cat << EOF
/*This file is autogenerated. Do not edit.*/
EOF
}

###############################################################################
# Return the generated Objective C source body for the specified schema file.
###############################################################################
function getObjcBody() {
  # determine if it's the .m or .h file
  TYPE="$(echo "${OUTPUT_SRC}" | sed -e 's/.*\.//')"
  case ${TYPE} in
    "h")
      # replace the JSON with Objective C extern source
      # replace leading spaces up to the first double quote with "extern NSString *const "
      # replace <double quote> to end of line with <semi-colon>
      # remove lines with curly braces
      sed -e 's/^[[:space:]]*\"/extern NSString \*const /' \
          -e 's/\".*$/;/' \
          -e $'/[{}]/d' ${SCHEMAFILE}
      ;;
    "m")
      # replace the JSON with Objective C source
      # replace leading spaces up to the first double quote with "NSString *const "
      # replace <double quote><optional space><colon><optional space><double quote>
      #    with <space><equals><space>@<double quote>
      # replace <double quote><comma> with <double quote><semi-colon><comma>
      # replace <double quote><EOL> with <double quote><semi-colon>
      # remove lines with curly braces
      sed -e 's/^[[:space:]]*\"/NSString \*const /' \
          -e 's/\"[[:space:]]*\:[[:space:]]*\"/ = \@\"/' \
          -e 's/\",/\";/' \
          -e 's/\"$/\";/' \
          -e $'/[{}]/d' ${SCHEMAFILE}
      ;;
    *)
      return 1
  esac
}

###############################################################################
# Return the common footer for generating a ObjC source file for the specified
# schema.
###############################################################################
function getObjcFooter() {
  # nothing to do
  return 0
}

###############################################################################
# Return generated source HEADER string for the supplied type.
###############################################################################
function getHeader() {
  # get the supplied target
  HEADER_TARGET=${1,,}
  HEADER_TARGET=${HEADER_TARGET^}
  # get the output generated source file
  OUTPUT_SRC=${2}
  # write to the file
  echo "$(get"${HEADER_TARGET}"Header "${SCHEMA}")" > ${OUTPUT_SRC}
}

###############################################################################
# Return generated source BODY for the supplied type.
###############################################################################
function getBody() {
  # get the supplied target
  BODY_TARGET=${1,,}
  BODY_TARGET=${BODY_TARGET^}
  # get the output generated source file
  OUTPUT_SRC=${2}
  # write it to the file
  echo "$(get"${BODY_TARGET}"Body "${SCHEMAFILE}")" >> ${OUTPUT_SRC}
}

###############################################################################
# Return generated source HEADER string for the supplied type.
###############################################################################
function getFooter() {
  # get the supplied target
  FOOTER_TARGET=${1}
  FOOTER_TARGET=${FOOTER_TARGET^}
  # get the variable format of the schema (mostly for Java, ex. "action" for Actions schema)
  FOOTER_VARIABLE=${2}
  # get the output generated source file
  OUTPUT_SRC=${3}
  # write to the file
  echo "$(get"${FOOTER_TARGET}"Footer "${SCHEMA}" "${FOOTER_VARIABLE}")" >> ${OUTPUT_SRC}
}

###############################################################################
# Return the common header for generating a Java source file for the specified
# schema.
###############################################################################
function buildSourceFiles() {
  # get the supplied target
  TARGET=${1}
  # get the supplied schema
  SCHEMA=${2}
  # get the schema JSON file
  SCHEMAFILE=${3}
  # get output dir for generated source
  OUT_SRC_DIR=${4}
  # convert schema "Actions" to "action", first lower-case, then cut the "s" off the end
  VARIABLE=${SCHEMA,,}
  VARIABLE=${VARIABLE: : -1}
  case ${TARGET} in
    "java")
      ## For Java, we only need a single .java file per schema
      # take the schema and make it "Actions.java" or "Events.java"
      SRC_FILE="${SCHEMA}.java"
      # write the header
      getHeader ${TARGET} ${OUT_SRC_DIR}/${SRC_FILE}
      # write the body
      getBody ${TARGET} ${OUT_SRC_DIR}/${SRC_FILE}
      # write the footer
      getFooter ${TARGET} ${VARIABLE} ${OUT_SRC_DIR}/${SRC_FILE}
      ;;
    "objc")
      ## For Objective C, we need a .h and .m file per schema
      H_FILE="${SCHEMA}.h"
      M_FILE="${SCHEMA}.m"
      # header is the same for both .h and .m
      getHeader ${TARGET} ${OUT_SRC_DIR}/${H_FILE}
      getHeader ${TARGET} ${OUT_SRC_DIR}/${M_FILE}
      # write the body for each
      getBody ${TARGET} ${OUT_SRC_DIR}/${H_FILE}
      getBody ${TARGET} ${OUT_SRC_DIR}/${M_FILE}
      # write the footer for each
      getFooter ${TARGET} ${VARIABLE} ${OUT_SRC_DIR}/${H_FILE}
      getFooter ${TARGET} ${VARIABLE} ${OUT_SRC_DIR}/${M_FILE}
      ;;
    *)
      return 1
  esac
}

###############################################################################
# Main function.
###############################################################################
function main() {
  if validateArgs $@; then
    # we have valid arguments
    for SCHEMAFILE in `ls ${SCHEMA_DIR}/*.json`; do
      # get schema file and strip the extension
      SCHEMA=$(basename ${SCHEMAFILE} .json)
      # lower case the name
			SCHEMA=${SCHEMA,,}
      # upper case the first letter
      SCHEMA=${SCHEMA^}
      buildSourceFiles "${1}" "${SCHEMA}" "${SCHEMAFILE}" "${2}"
    done
  fi
}

# Call the main.
main $@
