'use strict';

var actions = require('./actions.json');
var fs = require('fs');
var _ = require('lodash');
var Rx = require('rx');

if (process.argv.length !== 3) {
  console.log('You must enter objc or java to produce command output');
  return;
}

var arg = process.argv[2];

if (arg === 'objc') {

  var objchead = '/*This file is autogenerated. Do not edit.*/\n';
  //Objective-C Output
  var first = true;
  Rx.Observable.create((sub) => {
    _.mapKeys(actions,(v,k) => {
      var val = '';
      if (!first) {
        val += ';\n';
      }
      val += 'extern NSString *const ' + k;
      sub.onNext(val);
      first = false;
    });
    sub.onCompleted();
  }).reduce((acc,v) => {
    return acc + v;
  },objchead)
    .subscribe(
      (d) => {
        fs.writeFileSync('Actions.h',d+';\n');
      }
    );
  var firstm = true;
  Rx.Observable.create((sub) => {
    _.mapKeys(actions,(v,k) => {
      var val = '';
      if (!firstm) {
        val += ';\n';
      }
      val += 'NSString *const ' + k + ' = @"' + v + '"';
      sub.onNext(val);
      firstm = false;
    });
    sub.onCompleted();
  }).reduce((acc,v) => {
    return acc + v;
  },objchead)
    .subscribe(
      d => {
        fs.writeFileSync('Actions.m',d+';\n');
      }
    );

} else if (arg === 'java') {
  var javahead = 'package com.boundlessgeo.schema;\n\n';
  var javabody = `\n    private final String action;

    Actions(String action) {
        this.action = action;
    }

    public String value() {
        return action;
    }

    public static Actions fromAction(String action) {
        for (Actions v : values()) {
            if (v.action.equalsIgnoreCase(action)) {
                return v;
            }
        }
        throw new IllegalArgumentException(
            "Action: " + action + " is not an action associated with an Action."
        );
    }
    \n`;
  first = true;
  Rx.Observable.create((sub) => {
    _.mapKeys(actions,(v,k) => {
      var val = '';
      if (!first) {
        val += ',\n';
      }
      val += '\t' + k + '(\"' + v + '\")';
      sub.onNext(val);
      first = false;
    });
    sub.onCompleted();
  }).reduce((acc,v) => {
    return acc + v;
  },javahead+'public enum Actions {\n\n')
    .subscribe(
      (d) => {
        fs.writeFileSync('Actions.java',d+';\n'+ javabody +'};\n');
      }
    );
}
