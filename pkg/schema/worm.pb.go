// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema/worm.proto

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	schema/worm.proto
	schema/Command.proto
	schema/Event.proto
	schema/Metadata.proto

It has these top-level messages:
	Response
	Subscription
	Command
	Event
	Metadata
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Result of an rpc call
type Response struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Code    int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// Subscribe for Events
type Subscription struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*Subscription)(nil), "Subscription")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WormService service

type WormServiceClient interface {
	// Issue a Command
	IssueCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	// Subscribe, receive Events
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (WormService_SubscribeClient, error)
}

type wormServiceClient struct {
	cc *grpc.ClientConn
}

func NewWormServiceClient(cc *grpc.ClientConn) WormServiceClient {
	return &wormServiceClient{cc}
}

func (c *wormServiceClient) IssueCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/WormService/IssueCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wormServiceClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (WormService_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WormService_serviceDesc.Streams[0], c.cc, "/WormService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &wormServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WormService_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type wormServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *wormServiceSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for WormService service

type WormServiceServer interface {
	// Issue a Command
	IssueCommand(context.Context, *Command) (*Response, error)
	// Subscribe, receive Events
	Subscribe(*Subscription, WormService_SubscribeServer) error
}

func RegisterWormServiceServer(s *grpc.Server, srv WormServiceServer) {
	s.RegisterService(&_WormService_serviceDesc, srv)
}

func _WormService_IssueCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WormServiceServer).IssueCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WormService/IssueCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WormServiceServer).IssueCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _WormService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WormServiceServer).Subscribe(m, &wormServiceSubscribeServer{stream})
}

type WormService_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type wormServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *wormServiceSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _WormService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WormService",
	HandlerType: (*WormServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueCommand",
			Handler:    _WormService_IssueCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _WormService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema/worm.proto",
}

func init() { proto.RegisterFile("schema/worm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x31, 0x4f, 0x84, 0x40,
	0x10, 0x85, 0x0f, 0xf5, 0x10, 0x46, 0x2c, 0x9c, 0x5c, 0x41, 0xa8, 0x08, 0x51, 0x43, 0xb5, 0x1a,
	0xfd, 0x07, 0x1a, 0x0b, 0x13, 0xab, 0xbd, 0xc2, 0xc4, 0xd8, 0xc0, 0x32, 0x89, 0x14, 0xcb, 0x90,
	0x9d, 0xe5, 0xfc, 0xfb, 0xc6, 0x65, 0x2f, 0xb9, 0xee, 0xcd, 0x57, 0xbc, 0x79, 0x1f, 0xdc, 0x88,
	0xf9, 0x21, 0xdb, 0x3d, 0xfc, 0xb2, 0xb3, 0x6a, 0x76, 0xec, 0xb9, 0xc2, 0x88, 0xde, 0x0e, 0x34,
	0xf9, 0xc8, 0x76, 0x91, 0xbd, 0xb2, 0xb5, 0xdd, 0x34, 0xac, 0xb4, 0xf9, 0x80, 0x4c, 0x93, 0xcc,
	0x3c, 0x09, 0x61, 0x09, 0x97, 0xb2, 0x18, 0x43, 0x22, 0x65, 0x52, 0x27, 0x6d, 0xa6, 0x8f, 0x27,
	0x22, 0x5c, 0x0c, 0x9d, 0xef, 0xca, 0xb3, 0x3a, 0x69, 0x0b, 0x1d, 0xf2, 0x3f, 0x33, 0x3c, 0x50,
	0x79, 0x5e, 0x27, 0xed, 0x56, 0x87, 0xdc, 0xdc, 0x42, 0xb1, 0x5f, 0x7a, 0x31, 0x6e, 0x9c, 0xfd,
	0xc8, 0x13, 0xee, 0x60, 0xeb, 0x79, 0x1e, 0x4d, 0xe8, 0xcb, 0xf5, 0x7a, 0x3c, 0x7d, 0xc3, 0xd5,
	0x27, 0x3b, 0xbb, 0x27, 0x77, 0x18, 0x0d, 0xe1, 0x1d, 0x14, 0xef, 0x22, 0x0b, 0xc5, 0x61, 0x98,
	0xa9, 0x98, 0xaa, 0x5c, 0x1d, 0xb7, 0x35, 0x1b, 0xbc, 0x87, 0x3c, 0x76, 0xf7, 0x84, 0xd7, 0xea,
	0xf4, 0x4f, 0x95, 0xaa, 0x60, 0xda, 0x6c, 0x1e, 0x93, 0x97, 0xec, 0x2b, 0x5d, 0x4d, 0xfb, 0x34,
	0x28, 0x3e, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xa4, 0xf5, 0x69, 0x21, 0x01, 0x00, 0x00,
}
